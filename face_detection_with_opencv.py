# -*- coding: utf-8 -*-
"""Face Detection with OpenCV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1evySi5P9NbEZOJTjJ-Or4oO9O9_G3Iph
"""

!pip install opencv-python-headless matplotlib --quiet

import cv2
import matplotlib.pyplot as plt
import urllib.request
import numpy as np
import os

cascade_url = "https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml"
cascade_path = "haarcascade_frontalface_default.xml"
if not os.path.exists(cascade_path):
  urllib.request.urlretrieve(cascade_url, cascade_path)

face_cascade = cv2.CascadeClassifier(cascade_path)

img_url = "https://raw.githubusercontent.com/opencv/opencv/master/samples/data/lena.jpg"

try:
  req = urllib.request.Request(
      img_url,
      data=None,
      headers={
          'User-Agent': 'Mozilla/5.0 (x11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 safari/537.36'
      }
  )

  resp = urllib.request.urlopen(req)
  img_data = np.asarray(bytearray(resp.read()), dtype="uint8")
  img = cv2.imdecode(img_data, cv2.IMREAD_COLOR)

  if img is None:
    print(f"Error: could not decode image from {img_url}. Check the URL and image format.")
  else:
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(30,30),
        flags=cv2.CASCADE_SCALE_IMAGE
    )
    print(f"Detected {len(faces)} face(s)")
except Exception as e:
  print(f"An error occured: {e}")

for (x,y,w,h) in faces:
  cv2.rectangle(img, (x,y), (x + w, y + h), (0, 255, 0), 2)

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(12,8))
plt.imshow(img_rgb)
plt.axis("off")
plt.title("Face Detection Result")
plt.show()